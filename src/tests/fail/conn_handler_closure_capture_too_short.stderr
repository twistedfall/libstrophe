error[E0597]: `val` does not live long enough
  --> src/tests/fail/conn_handler_closure_capture_too_short.rs:8:4
   |
5  |           let mut val = 0;
   |               ------- binding `val` declared here
6  |           let conn = Connection::new(Context::new_with_null_logger());
7  |           conn.connect_client(None, None, |_, _, _| {
   |           -                               --------- value captured here
   |  _________|
   | |
8  | |             val = 1;
   | |             ^^^ borrowed value does not live long enough
9  | |         }).unwrap()
   | |___________________- a temporary with access to the borrow is created here ...
10 |       };
   |       -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `libstrophe::Context`
   |       |
   |       `val` dropped here while still borrowed
   |
help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped
   |
9  |         }).unwrap();
   |                    +
